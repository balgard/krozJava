#BlueJ class context
comment0.params=r\ c\ b
comment0.target=Location(int,\ int,\ boolean)
comment0.text=\n\ Constructs\ a\ location\ with\ given\ row\ and\ column\ coordinates.\n\ @param\ r\ the\ row\n\ @param\ c\ the\ column\n
comment1.params=r\ c
comment1.target=Location(int,\ int)
comment10.params=
comment10.target=int\ hashCode()
comment10.text=\n\ Generates\ a\ hash\ code.\n\ @return\ a\ hash\ code\ for\ this\ location\n
comment11.params=other
comment11.target=int\ compareTo(java.lang.Object)
comment11.text=\n\ Compares\ this\ location\ to\ <code>other</code>\ for\ ordering.\ Returns\ a\n\ negative\ integer,\ zero,\ or\ a\ positive\ integer\ as\ this\ location\ is\ less\n\ than,\ equal\ to,\ or\ greater\ than\ <code>other</code>.\ Locations\ are\n\ ordered\ in\ row-major\ order.\ <br\ />\n\ (Precondition\:\ <code>other</code>\ is\ a\ <code>Location</code>\ object.)\n\ @param\ other\ the\ other\ location\ to\ test\n\ @return\ a\ negative\ integer\ if\ this\ location\ is\ less\ than\n\ <code>other</code>,\ zero\ if\ the\ two\ locations\ are\ equal,\ or\ a\ positive\n\ integer\ if\ this\ location\ is\ greater\ than\ <code>other</code>\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\n\ Creates\ a\ string\ that\ describes\ this\ location.\n\ @return\ a\ string\ with\ the\ row\ and\ column\ of\ this\ location,\ in\ the\ format\n\ (row,\ col)\n
comment2.params=
comment2.target=int\ getRow()
comment2.text=\n\ Gets\ the\ row\ coordinate.\n\ @return\ the\ row\ of\ this\ location\n
comment3.params=
comment3.target=int\ getCol()
comment3.text=\n\ Gets\ the\ column\ coordinate.\n\ @return\ the\ column\ of\ this\ location\n
comment4.params=
comment4.target=boolean\ getCleared()
comment5.params=
comment5.target=void\ setCleared()
comment6.params=
comment6.target=java.lang.String\ printCleared()
comment7.params=direction
comment7.target=Location\ getAdjacentLocation(int)
comment7.text=\n\ Gets\ the\ adjacent\ location\ in\ any\ one\ of\ the\ eight\ compass\ directions.\n\ @param\ direction\ the\ direction\ in\ which\ to\ find\ a\ neighbor\ location\n\ @return\ the\ adjacent\ location\ in\ the\ direction\ that\ is\ closest\ to\n\ <tt>direction</tt>\n
comment8.params=target
comment8.target=int\ getDirectionToward(Location)
comment8.text=\n\ Returns\ the\ direction\ from\ this\ location\ toward\ another\ location.\ The\n\ direction\ is\ rounded\ to\ the\ nearest\ compass\ direction.\n\ @param\ target\ a\ location\ that\ is\ different\ from\ this\ location\n\ @return\ the\ closest\ compass\ direction\ from\ this\ location\ toward\n\ <code>target</code>\n
comment9.params=other
comment9.target=boolean\ equals(java.lang.Object)
comment9.text=\n\ Indicates\ whether\ some\ other\ <code>Location</code>\ object\ is\ "equal\ to"\n\ this\ one.\n\ @param\ other\ the\ other\ location\ to\ test\n\ @return\ <code>true</code>\ if\ <code>other</code>\ is\ a\n\ <code>Location</code>\ with\ the\ same\ row\ and\ column\ as\ this\ location;\n\ <code>false</code>\ otherwise\n
numComments=13
